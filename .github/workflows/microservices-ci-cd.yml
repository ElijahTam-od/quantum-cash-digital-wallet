name: Microservices CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  BASE_IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: self-hosted  # Ensure your runner has access to Kubernetes tools like kubectl

    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [account-service, user-service]

    steps:
      # Checkout the code
      - uses: actions/checkout@v2

      # Set up JDK 17 for building Java services
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'adopt'

      # Build the service using Maven
      - name: Build with Maven
        run: mvn clean package -f ${{ matrix.service }}/pom.xml

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: '${{ github.repository_owner }}'

      # Log in to the GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./${{ matrix.service }}  # Context is now the service directory
          file: ./Dockerfile                  # Dockerfile is relative to the context
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ matrix.service }}:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Create Kubernetes secret for Docker Registry
      - name: Create Docker Registry Secret in Kubernetes
        env:
          DOCKER_USERNAME: ${{ github.actor }}
          DOCKER_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        run: |
          kubectl create secret docker-registry github-registry \
            --docker-server=${{ env.REGISTRY }} \
            --docker-username=${{ env.DOCKER_USERNAME }} \
            --docker-password=${{ env.DOCKER_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -

      # Deploy to local Kubernetes cluster
      - name: Deploy to local Kubernetes
        run: |
          # Apply Kubernetes deployment and service configurations
          kubectl apply -f ${{ matrix.service }}/kubernetes/deployment.yaml
          kubectl apply -f ${{ matrix.service }}/kubernetes/service.yaml

          # Update the image of the deployment with the new version
          kubectl set image deployment/${{ matrix.service }} ${{ matrix.service }}=${{ env.REGISTRY }}/${{ env.BASE_IMAGE_NAME }}-${{ matrix.service }}:${{ github.sha }}
